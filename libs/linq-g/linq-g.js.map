{"version":3,"file":"linq-g.js","sourceRoot":"","sources":["../src/Functions.ts","../src/Enumerable.ts","../src/Generators.ts","../src/Grouping.ts","../src/Iterators.ts","../src/Index.ts","../src/Lookup.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nnamespace Linq {\r\n\r\n    export type AccumulatorFunc<TAccumulate, TSource, TResult> = (aggregate: TAccumulate, next: TSource) => TResult;\r\n\r\n    export type SelectorFunc<TSource, TResult> = (source: TSource, index?: number) => TResult;\r\n\r\n    export type PredicateFunc<TSource> = (source: TSource, index?: number) => boolean;\r\n\r\n    export type ComparerFunc<TSource> = (item1: TSource, item2: TSource) => number;\r\n\r\n    export type EqualityComparerFunc<TSource> = (item1: TSource, item2: TSource) => boolean;\r\n\r\n    export type GroupResultSelectorFunc<TKey, TElement, TResult> = (key: TKey, elements: Iterable<TElement>) => TResult;\r\n\r\n    export type ResultSelectorFunc<TFirst, TSecond, TResult> = (first: TFirst, second: TSecond) => TResult;\r\n}","/// <reference path=\"Functions.ts\" />\r\n\r\nnamespace Linq {\r\n\r\n\texport function isEnumerable(object: any): object is Linq.IEnumerable<any> {\r\n\t\treturn object instanceof IterableEnumerable;\r\n\t}\r\n\r\n\texport function isGroupedEnumerable(object: any): object is Linq.GroupedEnumerable<any, any> {\r\n\t\treturn object instanceof GroupedEnumerable;\r\n\t}\r\n\r\n\texport function isIterator(object: any): object is Iterator<any> {\r\n\t\treturn Reflect.has(object, \"next\") && typeof Reflect.get(object, \"next\") === \"function\";\r\n\t}\r\n\r\n\texport function composeComparers<T>(\r\n\t\tfirstComparer: (a: T, b: T) => number,\r\n\t\tsecondComparer: (a: T, b: T) => number\r\n\t) : ((a: T, b: T) => number) {\r\n\t\treturn (a: T, b: T) => firstComparer(a, b) || secondComparer(a, b);\r\n\t}\r\n\r\n\t\r\n\r\n    export interface IEnumerable<TSource> extends Iterable<TSource> {\r\n\r\n        aggregate<TAccumulate, TResult = TAccumulate>(func: AccumulatorFunc<TAccumulate, TSource, TAccumulate>): TResult;\r\n        aggregate<TAccumulate, TResult = TAccumulate>(seed: TAccumulate, func: AccumulatorFunc<TAccumulate, TSource, TAccumulate>): TResult;\r\n        aggregate<TAccumulate, TResult = TAccumulate>(seed: TAccumulate, func: AccumulatorFunc<TAccumulate, TSource, TAccumulate>, resultSelector: SelectorFunc<TAccumulate, TResult>): TResult;\r\n\r\n        all(predicate: PredicateFunc<TSource>): boolean;\r\n\r\n        any(predicate?: PredicateFunc<TSource>): boolean;\r\n\r\n        append(item: TSource): IEnumerable<TSource>;\r\n\r\n        /*NON STANDARD*/average(ignoreNonNumberItems ?: boolean): number;\r\n        average(selector ?: SelectorFunc<TSource, number>): number;\r\n\r\n        concat(sequence: Iterable<TSource>): IEnumerable<TSource>;\r\n\r\n        contains(value: TSource, comparer?: EqualityComparerFunc<TSource>): boolean;\r\n\r\n        count(predicate?: PredicateFunc<TSource>): number;\r\n\r\n        defaultIfEmpty(defaultValue: TSource): IEnumerable<TSource>;\r\n\r\n        distinct(): IEnumerable<TSource>;\r\n\r\n        elementAt(index: number): TSource;\r\n\r\n        elementAtOrDefault(index: number): TSource;\r\n\r\n        except(sequence: Iterable<TSource>): IEnumerable<TSource>;\r\n\r\n        first(predicate?: PredicateFunc<TSource>): TSource;\r\n\r\n        firstOrDefault(predicate: PredicateFunc<TSource>): TSource;\r\n\r\n        groupBy<TKey>(keySelector: SelectorFunc<TSource, TKey>): IEnumerable<IGrouping<TKey, TSource>>;\r\n        groupBy<TKey, TElement = TSource>(keySelector: SelectorFunc<TSource, TKey>, elementSelector: SelectorFunc<TSource, TElement>): IEnumerable<IGrouping<TKey, TElement>>;\r\n        groupBy<TKey, TElement = TSource, TResult = TElement>(keySelector: SelectorFunc<TSource, TKey>, elementSelector: SelectorFunc<TSource, TElement>, resultSelector: GroupResultSelectorFunc<TKey, TElement, TResult>): IEnumerable<IGrouping<TKey, TResult>>;\r\n\r\n        // groupByWithCompare<TKey>(keySelector: SelectorFunc<TSource, TKey>, comparer: EqualityComparerFunc<TKey>): IEnumerable<IGrouping<TKey, TSource>>;\r\n        // groupByWithCompare<TKey, TElement = TSource>(keySelector: SelectorFunc<TSource, TKey>, elementSelector: SelectorFunc<TSource, TElement>, comparer: EqualityComparerFunc<TKey>): IEnumerable<IGrouping<TKey, TElement>>;\r\n        // groupByWithCompare<TKey, TElement = TSource, TResult = TElement>(keySelector: SelectorFunc<TSource, TKey>, elementSelector: SelectorFunc<TSource, TElement>, resultSelector: ResultSelectorFunc<TKey, Iterable<TElement>, TResult>, comparer: EqualityComparerFunc<TKey>): IEnumerable<IGrouping<TKey, TResult>>;\r\n\r\n        groupJoin<TKey, TInner, TResult>(\r\n            innerSequence: Iterable<TInner>,\r\n            outerKeySelector: SelectorFunc<TSource, TKey>,\r\n            innerKeySelector: SelectorFunc<TInner, TKey>,\r\n            resultSelector: ResultSelectorFunc<TSource, Iterable<TInner>, TResult>,\r\n            comparer: EqualityComparerFunc<TKey>\r\n        ): IEnumerable<TResult>;\r\n\r\n        intersect(sequence: Iterable<TSource>): IEnumerable<TSource>;\r\n\r\n        join<TKey, TInner, TResult>(\r\n            innerSequence: Iterable<TInner>,\r\n            outerKeySelector: SelectorFunc<TSource, TKey>,\r\n            innerKeySelector: SelectorFunc<TInner, TKey>,\r\n            resultSelector: ResultSelectorFunc<TSource, TInner, TResult>,\r\n            comparer?: EqualityComparerFunc<TKey>\r\n        ): IEnumerable<TResult>;\r\n\r\n        last(predicate: PredicateFunc<TSource>): TSource;\r\n\r\n        lastOrDefault(predicate: PredicateFunc<TSource>): TSource;\r\n\r\n        /*NON STANDARD*/max(ignoreNonNumberItems ?: boolean): number;\r\n        max(selector ?: SelectorFunc<TSource, number>): number;\r\n\r\n        /*NON STANDARD*/min(ignoreNonNumberItems ?: boolean): number;\r\n        min(selector ?: SelectorFunc<TSource, number>): number;\r\n\r\n        ofType<TResult>(type: new () => TResult): IEnumerable<TResult>;\r\n\r\n        orderBy<TKey>(keySelector: SelectorFunc<TSource, TKey>): IOrderedEnumerable<TSource>;\r\n\r\n        orderByDescending<TKey>(keySelector: SelectorFunc<TSource, TKey>): IOrderedEnumerable<TSource>;\r\n\r\n        prepend(item: TSource): IEnumerable<TSource>;\r\n\r\n        reverse(): IEnumerable<TSource>;\r\n\r\n        select<TResult>(selector: SelectorFunc<TSource, TResult>): IEnumerable<TResult>;\r\n\r\n        selectMany<TResult>(selector: SelectorFunc<TSource, Iterable<TResult>>): IEnumerable<TResult>;\r\n\r\n        sequenceEqual(other: Iterable<TSource>, comparer?: EqualityComparerFunc<TSource>): boolean;\r\n\r\n        single(predicate?: PredicateFunc<TSource>): TSource;\r\n\r\n        singleOrDefault?(predicate: PredicateFunc<TSource>): TSource;\r\n\r\n        skip(count: number): IEnumerable<TSource>;\r\n\r\n        skipLast(count: number): IEnumerable<TSource>;\r\n\r\n        skipWhile(predicate: PredicateFunc<TSource>): IEnumerable<TSource>;\r\n\r\n        /*NON STANDARD*/sum(ignoreNonNumberItems ?: boolean): number;\r\n        sum(selector?: SelectorFunc<TSource, number>): number;\r\n\r\n        take(count: number): IEnumerable<TSource>;\r\n\r\n        takeLast(count: number): IEnumerable<TSource>;\r\n\r\n        takeWhile(predicate: PredicateFunc<TSource>): IEnumerable<TSource>;\r\n\r\n        toArray(): TSource[];\r\n\r\n        toDictionary<TKey, TValue>(\r\n            keySelector: SelectorFunc<TSource, TKey>,\r\n            elementSelector: SelectorFunc<TSource, TValue>,\r\n            comparer: EqualityComparerFunc<TKey>\r\n        ): Map<TKey, TValue>;\r\n\r\n        //toLookup<TKey, TElement = TSource>(keySelector: SelectorFunc<TSource, TKey>, elementSelector?: SelectorFunc<TSource, TElement>, comparer?: EqualityComparerFunc<TKey>): ILookup<TKey, TElement>;\r\n\r\n        union(sequence: Iterable<TSource>): IEnumerable<TSource>;\r\n\r\n        where(predicate: PredicateFunc<TSource>): IEnumerable<TSource>;\r\n\r\n        zip<TSecond, TResult>(sequence: Iterable<TSecond>, resultSelector: ResultSelectorFunc<TSource, TSecond, TResult>): IEnumerable<TResult>;\r\n    }\r\n\r\n\texport interface OrderedIterable<TSource> extends Iterable<TSource> {\r\n\t\treadonly comparer: ComparerFunc<TSource>;\r\n\t}\r\n\r\n\texport interface IOrderedEnumerable<TSource> extends IEnumerable<TSource>/*, OrderedIterable<TSource>*/ {\r\n\r\n\t\tthenBy<TKey>(keySelector: SelectorFunc<TSource, TKey>): IOrderedEnumerable<TSource>;\r\n\r\n\t\tthenByDescending<TKey>(keySelector: SelectorFunc<TSource, TKey>): IOrderedEnumerable<TSource>\r\n\t}\r\n\r\n\r\n\r\n\tclass IteratorIterableWrapper<T> implements Iterable<T> {\r\n\r\n\t\tprivate _source: Iterator<T>;\r\n\t\tprivate _buffer: T[];\r\n\t\tprivate _buffered: boolean;\r\n\r\n\t\tconstructor(iterator: Iterator<T>) {\r\n\t\t\tthis._source = iterator;\r\n\t\t\tthis._buffer = [];\r\n\t\t\tthis._buffered = false;\r\n\t\t}\r\n\r\n\t\tpublic *[Symbol.iterator](): Iterator<T> {\r\n\t\t\tif (this._buffered) {\r\n\t\t\t\tfor (const item of this._buffer) {\r\n\t\t\t\t\tyield item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet item;\r\n\t\t\t\twhile (!(item = this._source.next()).done) {\r\n\t\t\t\t\tthis._buffer.push(item.value);\r\n\t\t\t\t\tyield item.value;\r\n\t\t\t\t}\r\n\t\t\t\tthis._buffered = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n    class EnumerableExtensions {\r\n\r\n        private static tryGetFirst<TSource>(source: Iterable<TSource>, predicate: PredicateFunc<TSource>, result: { value: TSource }) {\r\n            if(source instanceof Array && !predicate) {\r\n                if (source.length == 0) {\r\n                    result.value = undefined;\r\n                    return false;\r\n                }\r\n                result.value = source[0];\r\n                return true;\r\n            } else {\r\n                for (let item of source) {\r\n                    if (predicate) {\r\n                        if (predicate(item)) {\r\n                            result.value = item;\r\n                            return true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        result.value = item;\r\n                        return true;\r\n                    }\r\n                }\r\n                result.value = null;\r\n                return false;\r\n            }\r\n        }\r\n\r\n        private static tryGetLast<TSource>(source: Iterable<TSource>, predicate: PredicateFunc<TSource>, result: { value: TSource }) {\r\n            if(source instanceof Array && !predicate) {\r\n                if (source.length == 0){\r\n                    result.value = undefined;\r\n                    return false;\r\n                }\r\n                result.value = source[source.length - 1];\r\n                return true;\r\n            } else {\r\n                var last = null;\r\n                var found = false;\r\n                for (let item of source) {\r\n                    if (predicate) {\r\n                        if (predicate(item)) {\r\n                            last = item;\r\n                            found = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        last = item;\r\n                        found = true;\r\n                    }\r\n                }\r\n                result.value = last;\r\n                return found;\r\n            }\r\n        }\r\n\r\n\r\n        public static aggregate<TSource, TAccumulate = TSource, TResult = TAccumulate>(\r\n            source: Iterable<TSource>,\r\n            seed: TAccumulate,\r\n            accumulatorFunc: AccumulatorFunc<TAccumulate, TSource, TAccumulate>,\r\n            resultSelector?: SelectorFunc<TAccumulate, TResult>\r\n        ) {\r\n            let firstDone = false;\r\n            let current = seed;\r\n            for (let item of source) {\r\n                current = accumulatorFunc(current, item);\r\n                firstDone = true;\r\n            }\r\n\r\n            if (!firstDone && seed === null) {\r\n                throw new Error(\"no elements\");\r\n            }\r\n\r\n            if (typeof resultSelector === \"function\") {\r\n                return resultSelector(current);\r\n            } else {\r\n                return <TResult><any>current;\r\n            }\r\n        }\r\n\r\n        public static all<TSource>(source: Iterable<TSource>, predicate: PredicateFunc<TSource>): boolean {\r\n            if(source instanceof Array) {\r\n                return source.every(predicate);\r\n            } else {\r\n                for (let item of source) {\r\n                    if (!predicate(item))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n\r\n        public static any<TSource>(source: Iterable<TSource>, predicate: PredicateFunc<TSource>): boolean {\r\n            if(source instanceof Array) {\r\n                return source.some(predicate);\r\n            } else {\r\n                for (let item of source) {\r\n                    if (typeof predicate === \"function\") {\r\n                        if (predicate(item)) {\r\n                            return true;\r\n                        }\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n\r\n        public static append<TSource>(source: Iterable<TSource>, item: TSource): IEnumerable<TSource> {\r\n            let iterator = new AppendIterator(source, item);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static average<TSource>(source: Iterable<TSource>, selector?: SelectorFunc<TSource, number>, ignoreNonNumberItems?: boolean): number {\r\n            var sum = 0;\r\n            var count = 0;\r\n            if (!selector) {\r\n                for (let element of source) {\r\n                    if (typeof element !== \"number\") {\r\n                        if (ignoreNonNumberItems)\r\n                            continue;\r\n                        throw new Error(\"invalid \" + typeof (element) + \" item\");\r\n                    }\r\n                    sum += element;\r\n                    count++;\r\n                }\r\n            }\r\n            else {\r\n                for (let element of source) {\r\n                    let value = selector(element);\r\n                    sum += value;\r\n                    count++;\r\n                }\r\n            }\r\n            if (count == 0)\r\n                return 0;\r\n            return sum / count;\r\n        }\r\n\r\n        // TODO ? Cast\r\n\r\n        public static concat<TSource>(source: Iterable<TSource>, sequence: Iterable<TSource>): IEnumerable<TSource> {\r\n            let iterator = new ConcatIterator(source, sequence);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static contains<TSource>(source: Iterable<TSource>, value: TSource, comparer?: EqualityComparerFunc<TSource>): boolean {\r\n            if (!comparer) {\r\n                if(source instanceof Array) {\r\n                    return source.indexOf(value) >= 0;\r\n                } else {\r\n                    for (let element of source) {\r\n                        if (element === value)\r\n                            return true;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                for (let element of source) {\r\n                    if (comparer(element, value)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public static count<TSource>(source: Iterable<TSource>, predicate?: PredicateFunc<TSource>): number {\r\n            if (!predicate) {\r\n                if (source instanceof Array)\r\n                    return source.length;\r\n                return [...source].length;\r\n            }\r\n            else {\r\n                var count = 0;\r\n                for (let element of source) {\r\n                    if (predicate(element)) {\r\n                        count++;\r\n                    }\r\n                }\r\n                return count;\r\n            }\r\n        }\r\n\r\n        public static defaultIfEmpty<TSource>(source: Iterable<TSource>, defaultValue: TSource): IEnumerable<TSource> {\r\n            let iterator = new DefaultIfEmptyIterator(source, defaultValue);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static distinct<TSource>(source: Iterable<TSource>): IEnumerable<TSource> {\r\n            let iterator = new DistinctIterator(source);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static elementAt<TSource>(source: Iterable<TSource>, index: number): TSource {\r\n            if (source instanceof Array) {\r\n                if (index < 0 || index >= source.length)\r\n                    // TODO\r\n                    throw new Error(\"invalid index\");\r\n                return source[index];\r\n            }\r\n            let elementIndex = 0;\r\n            for (let element of source) {\r\n                if (elementIndex == index)\r\n                    return element;\r\n                elementIndex++;\r\n            }\r\n            // TODO\r\n            throw new Error(\"invalid index\");\r\n        }\r\n\r\n        public static elementAtOrDefault<TSource>(source: Iterable<TSource>, index: number): TSource {\r\n            // TODO\r\n            if (source instanceof Array) {\r\n                return source[index];\r\n            } else {\r\n                let elementIndex = 0;\r\n                for (let element of source) {\r\n                    if (elementIndex == index)\r\n                        return element;\r\n                    elementIndex++;\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n\r\n        public static empty<TSource>(): IEnumerable<TSource> {\r\n            return new Enumerable(new Array<TSource>());\r\n        }\r\n\r\n        public static except<TSource>(source: Iterable<TSource>, sequence: Iterable<TSource>): IEnumerable<TSource> {\r\n            let iterator = new ExceptIterator(source, sequence);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static first<TSource>(source: Iterable<TSource>, predicate?: PredicateFunc<TSource>): TSource {\r\n            let result = { value: <TSource>null };\r\n            if (this.tryGetFirst(source, predicate, result))\r\n                return result.value;\r\n            throw new Error();\r\n        }\r\n\r\n        public static firstOrDefault<TSource>(source: Iterable<TSource>, predicate?: PredicateFunc<TSource>): TSource {\r\n            let result = { value: <TSource>null };\r\n            if (this.tryGetFirst(source, predicate, result))\r\n                return result.value;\r\n            throw null\r\n        }\r\n\r\n        // public static GroupByTSourceTKey<TSource, TKey>(source: Iterable<TSource>, keySelector: SelectorFunc<TSource, TKey>, comparer?: EqualityComparerFunc<TKey>): IEnumerable<IGrouping<TKey, TSource>> {\r\n        //     return new GroupedEnumerableTSourceTKey<TSource, TKey>(source, keySelector, comparer);\r\n        // }\r\n\r\n        public static groupBySource<TSource, TKey>(\r\n            source: Iterable<TSource>, \r\n            keySelector: SelectorFunc<TSource, TKey>, \r\n            comparer?: EqualityComparerFunc<TKey>\r\n        ): IEnumerable<IGrouping<TKey, TSource>> {\r\n            return new GroupedEnumerable(source, keySelector/*, comparer*/);\r\n        }\r\n\r\n        // public static groupByElement<TSource, TKey, TElement>(\r\n        //     source: Iterable<TSource>, \r\n        //     keySelector: SelectorFunc<TSource, TKey>, \r\n        //     elementSelector?: SelectorFunc<TSource, TElement>, \r\n        //     comparer?: EqualityComparerFunc<TKey>\r\n        // ): IEnumerable<IGrouping<TKey, TElement>> {\r\n        //     return new GroupedEnumerable(source, keySelector, elementSelector/*, comparer*/);\r\n        // }\r\n\r\n\r\n        // public static groupByResult<TSource, TKey, TElement, TResult>(\r\n        //     source: Iterable<TSource>, \r\n        //     keySelector: SelectorFunc<TSource, TKey>, \r\n        //     elementSelector: SelectorFunc<TSource, TElement>,\r\n        //     resultSelector: GroupResultSelectorFunc<TKey, TElement, TResult>, \r\n        //     comparer?: EqualityComparerFunc<TKey>\r\n        // ): IEnumerable<TResult> {\r\n        //     return new GroupedResultEnumerable(source, keySelector, elementSelector, resultSelector/*, comparer*/);\r\n        // }\r\n\r\n        public static groupBy<TSource, TKey, TElement = TSource, TResult = TElement>(\r\n            source: Iterable<TSource>, \r\n            keySelector: SelectorFunc<TSource, TKey>, \r\n            elementSelector?: SelectorFunc<TSource, TElement>,\r\n            resultSelector?: GroupResultSelectorFunc<TKey, TElement, TResult>, \r\n            comparer?: EqualityComparerFunc<TKey>\r\n        ): IEnumerable<IGrouping<TKey, TElement>> | IEnumerable<TResult> {\r\n            if (typeof resultSelector === \"function\") {\r\n                return new GroupedResultEnumerable(source, keySelector, elementSelector, resultSelector/*, comparer*/);\r\n            } else {\r\n                return new GroupedEnumerable(source, keySelector, elementSelector/*, comparer*/);\r\n            }\r\n        }\r\n\r\n\r\n        public static groupJoin<TSource, TKey, TInner, TResult>(\r\n            source: Iterable<TSource>,\r\n            innerSequence: Iterable<TInner>,\r\n            outerKeySelector: SelectorFunc<TSource, TKey>,\r\n            innerKeySelector: SelectorFunc<TInner, TKey>,\r\n            resultSelector: GroupResultSelectorFunc<TSource, TInner, TResult>,\r\n            comparer: EqualityComparerFunc<TKey>\r\n        ): IEnumerable<TResult> {\r\n            let iterator = new GroupJoinIterator(source, outerKeySelector, innerSequence, innerKeySelector, resultSelector/* TODO , comparer*/);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static intersect<TSource>(source: Iterable<TSource>, sequence: Iterable<TSource>): IEnumerable<TSource> {\r\n            let iterator = new IntersectIterator(source, sequence);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static join<TOuter, TInner, TKey, TResult>(\r\n            source: Iterable<TOuter>,\r\n            inner: Iterable<TInner>,\r\n            outerKeySelector: SelectorFunc<TOuter, TKey>,\r\n            innerKeySelector: SelectorFunc<TInner, TKey>,\r\n            resultSelector: ResultSelectorFunc<TOuter, TInner, TResult>,\r\n            comparer?: EqualityComparerFunc<TKey>): IEnumerable<TResult> {\r\n\r\n            let iterator = new JoinIterator(source, inner, outerKeySelector,  innerKeySelector, resultSelector, comparer);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static last<TSource>(source: Iterable<TSource>, predicate?: PredicateFunc<TSource>): TSource {\r\n            let result = { value: <TSource>null };\r\n            if (this.tryGetLast(source, predicate, result))\r\n                return result.value;\r\n            throw new Error();\r\n        }\r\n\r\n        public static lastOrDefault<TSource>(source: Iterable<TSource>, predicate?: PredicateFunc<TSource>): TSource {\r\n            let result = { value: <TSource>null };\r\n            if (this.tryGetLast(source, predicate, result))\r\n                return result.value;\r\n            throw null;\r\n        }\r\n\r\n        public static max<TSource>(source: Iterable<TSource>, selector?: SelectorFunc<TSource, number>, ignoreNonNumberItems?: boolean): number {\r\n            let max = Number.NEGATIVE_INFINITY;\r\n            if (!selector) {\r\n                for (let element of source) {\r\n                    if (typeof (element) !== \"number\") {\r\n                        if (ignoreNonNumberItems)\r\n                            continue;\r\n                        throw new Error(\"invalid \" + typeof (element) + \" item\");\r\n                    }\r\n                    max = Math.max(max, element);\r\n                }\r\n            }\r\n            else {\r\n                for (let element of source) {\r\n                    let value = selector(element);\r\n                    max = Math.max(max, value);\r\n                }\r\n            }\r\n            return max;\r\n        }\r\n\r\n        public static min<TSource>(source: Iterable<TSource>, selector?: SelectorFunc<TSource, number>, ignoreNonNumberItems?: boolean): number {\r\n            let min = Number.POSITIVE_INFINITY;\r\n            if (!selector) {\r\n                for (let element of source) {\r\n                    if (typeof (element) !== \"number\") {\r\n                        if (ignoreNonNumberItems)\r\n                            continue;\r\n                        throw new Error(\"invalid \" + typeof (element) + \" item\");\r\n                    }\r\n                    min = Math.min(min, element);\r\n                }\r\n            }\r\n            else {\r\n                for (let element of source) {\r\n                    let value = selector(element);\r\n                    min = Math.min(min, value);\r\n                }\r\n            }\r\n            return min;\r\n        }\r\n\r\n        public static ofType<TSource, TResult>(source: Iterable<TSource>, type: new () => TResult): IEnumerable<TResult> {\r\n            let iterator = new OfTypeIterator(source, type);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static orderBy<TSource, TKey>(source: Iterable<TSource>, keySelector: SelectorFunc<TSource, TKey>): IOrderedEnumerable<TSource> {\r\n\t\t\tconst orderByIterator = new OrderByIterator(source, keySelector, false);\r\n\t\t\treturn new OrderedEnumerable(orderByIterator);\r\n            // var keyValueIterator = new KeyValueGenerator<TSource, TKey>(source, keySelector);\r\n            // var orderedArray = [...keyValueIterator].sort((a, b) => {\r\n            //     if (a.key < b.key) return -1;\r\n            //     if (a.key > b.key) return 1;\r\n            //     return 0;\r\n            // }).map(v => v.value);\r\n            // var iterator = new SimpleIterator<TSource>(orderedArray);\r\n            // return new Enumerable<TSource>(iterator);\r\n        }\r\n\r\n        public static orderByDescending<TSource, TKey>(source: Iterable<TSource>, keySelector: SelectorFunc<TSource, TKey>): IOrderedEnumerable<TSource> {\r\n\t\t\tconst orderByIterator = new OrderByIterator(source, keySelector, true);\r\n\t\t\treturn new OrderedEnumerable(orderByIterator);\r\n            // var keyValueIterator = new KeyValueGenerator<TSource, TKey>(source, keySelector);\r\n            // var orderedArray = [...keyValueIterator].sort((a, b) => {\r\n            //     if (a.key < b.key) return 1;\r\n            //     if (a.key > b.key) return -1;\r\n            //     return 0;\r\n            // }).map(v => v.value);\r\n            // var iterator = new SimpleIterator<TSource>(orderedArray);\r\n            // return new Enumerable<TSource>(iterator);\r\n        }\r\n\r\n        public static prepend<TSource>(source: Iterable<TSource>, item: TSource): IEnumerable<TSource> {\r\n            let iterator = new PrependIterator(source, item);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static range(start: number, end: number, step?: number): IEnumerable<number> {\r\n            var generator = new NumberGenerator(start, end, step);\r\n            return new Enumerable(generator);\r\n        }\r\n\r\n        public static repeat<TResult>(element: TResult, count: number): IEnumerable<TResult> {\r\n            var generator = new UserGenerator<TResult>((index) => element, count, null);\r\n            return new Enumerable(generator);\r\n        }\r\n\r\n        public static repeatElement<TResult>(callback: (index: number) => TResult, count: number, userData?: any): IEnumerable<TResult> {\r\n            var generator = new UserGenerator<TResult>(callback, count, userData);\r\n            return new Enumerable(generator);\r\n        }\r\n\r\n        public static reverse<TSource>(source: Iterable<TSource>): IEnumerable<TSource> {\r\n            let iterator = new ReverseIterator(source);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static select<TSource, TResult>(source: Iterable<TSource>, selector: SelectorFunc<TSource, TResult>): IEnumerable<TResult> {\r\n            var iterator = new SelectIterator(source, selector);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static selectMany<TSource, TResult>(source: Iterable<TSource>, selector: SelectorFunc<TSource, Iterable<TResult>>): IEnumerable<TResult> {\r\n            var iterator = new SelectManyIterator<TSource, TResult>(source, selector);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static sequenceEqual<TSource>(source: Iterable<TSource>, other: Iterable<TSource>, comparer?: EqualityComparerFunc<TSource>): boolean {\r\n\r\n            if (source instanceof Array && other instanceof Array) {\r\n                if (source.length != other.length)\r\n                    return false;\r\n            }\r\n\r\n            // TODO: test\r\n            let sourceIterator = source[Symbol.iterator]();\r\n            let otherIterator = other[Symbol.iterator]();\r\n\r\n            let sourceCurrent;\r\n            let otherCurrent;\r\n\r\n            while (true) {\r\n\r\n                sourceCurrent = sourceIterator.next();\r\n                otherCurrent = otherIterator.next();\r\n\r\n                if (sourceCurrent.done && otherCurrent.done)\r\n                    break;\r\n                if (sourceCurrent.done != otherCurrent.done)\r\n                    return false;\r\n\r\n                if (comparer) {\r\n                    if (!comparer(sourceCurrent.value, otherCurrent.value))\r\n                        return false;\r\n                }\r\n                else {\r\n                    if (sourceCurrent.value !== otherCurrent.value)\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        public static single<TSource>(source: Iterable<TSource>, predicate: PredicateFunc<TSource>): TSource {\r\n            var resultList = [...source].filter(v => predicate(v));\r\n            if (resultList.length == 1) {\r\n                return resultList[0];\r\n            } else if (resultList.length < 1) {\r\n                throw new Error(\"no elements\");\r\n            }\r\n            else {\r\n                throw new Error(\"more than one element\");\r\n            }\r\n        }\r\n\r\n        public static singleOrDefault<TSource>(source: Iterable<TSource>, predicate: PredicateFunc<TSource>): TSource {\r\n            var resultList = [...source].filter(v => predicate(v));\r\n            if (resultList.length == 1) {\r\n                return resultList[0];\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        public static skip<TSource>(source: Iterable<TSource>, count: number): IEnumerable<TSource> {\r\n            let iterator = new SkipIterator(source, count);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static skipLast<TSource>(source: Iterable<TSource>, count: number): IEnumerable<TSource> {\r\n            let iterator = new SkipLastIterator(source, count);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static skipWhile<TSource>(source: Iterable<TSource>, predicate: PredicateFunc<TSource>): IEnumerable<TSource> {\r\n            let iterator = new SkipWhileIterator(source, predicate);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static sum<TSource>(source: Iterable<TSource>, selector: SelectorFunc<TSource, number>, ignoreNonNumberItems?: boolean): number {\r\n            let result = 0;\r\n            if (!selector) {\r\n                for (let element of source) {\r\n                    if (typeof (element) !== \"number\") {\r\n                        if (ignoreNonNumberItems)\r\n                            continue;\r\n                        throw new Error(\"invalid \" + typeof (element) + \" item\");\r\n                    }\r\n                    result += element;\r\n                }\r\n            }\r\n            else {\r\n                for (let element of source) {\r\n                    let value = selector(element);\r\n                    if (typeof (value) === \"number\")\r\n                        result += value;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        public static take<TSource>(source: Iterable<TSource>, count: number): IEnumerable<TSource> {\r\n            let iterator = new TakeIterator(source, count);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static takeLast<TSource>(source: Iterable<TSource>, count: number): IEnumerable<TSource> {\r\n            let iterator = new TakeLastIterator(source, count);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static takeWhile<TSource>(source: Iterable<TSource>, predicate: PredicateFunc<TSource>): IEnumerable<TSource> {\r\n            let iterator = new TakeWhileIterator(source, predicate);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n\t\tpublic static thenBy<TSource, TKey>(source: OrderedIterable<TSource>, keySelector: SelectorFunc<TSource, TKey>): IOrderedEnumerable<TSource> {\r\n\t\t\tconst thenByIterator = new ThenByIterator(source, keySelector, false);\r\n\t\t\treturn new OrderedEnumerable(thenByIterator);\r\n        }\r\n\r\n        public static thenByDescending<TSource, TKey>(source: OrderedIterable<TSource>, keySelector: SelectorFunc<TSource, TKey>): IOrderedEnumerable<TSource> {\r\n\t\t\tconst thenByIterator = new ThenByIterator(source, keySelector, true);\r\n\t\t\treturn new OrderedEnumerable(thenByIterator);\r\n        }\r\n\r\n        public static toArray<TSource>(source: Iterable<TSource>): TSource[] {\r\n            if (source instanceof Array)\r\n                return source;\r\n            return [...source];\r\n        }\r\n\r\n        public static toDictionary<TSource, TKey, TValue>(\r\n            source: Iterable<TSource>,\r\n            keySelector: SelectorFunc<TSource, TKey>,\r\n            elementSelector: SelectorFunc<TSource, TValue>,\r\n            comparer: EqualityComparerFunc<TKey>\r\n        ): Map<TKey, TValue> {\r\n            var hasElementSelector = typeof elementSelector === \"function\";\r\n            var hasComparer = typeof comparer === \"function\";\r\n\r\n            var result = new Map<TKey, TValue>(); //   : { [name: any]: TValue } = {};\r\n            var keys = new Set<TKey>();\r\n            var keysEnumerable = new Enumerable(keys);\r\n\r\n            var index = 0;\r\n            for (let element of source) {\r\n\r\n                var key = keySelector(element, index);\r\n\r\n                if (hasComparer) {\r\n                    if (keysEnumerable.contains(key, comparer))\r\n                        throw new Error(\"duplicated key\");\r\n                }\r\n\r\n                let selectedElement;\r\n                if (hasElementSelector) {\r\n                    selectedElement = elementSelector(element, index);\r\n                } else {\r\n                    selectedElement = <TValue><any>element;\r\n                }\r\n\r\n                keys.add(key);\r\n                result.set(key, selectedElement);\r\n\r\n                index++;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public static toLookup<TSource, TKey, TElement = TSource>(\r\n            source: Iterable<TSource>,\r\n            keySelector: SelectorFunc<TSource, TKey>,\r\n            elementSelector?: SelectorFunc<TSource, TElement>,\r\n            comparer?: EqualityComparerFunc<TKey>\r\n        ): ILookup<TKey, TElement> {\r\n\r\n            if (source === null) {\r\n                throw new Error(\"null argument source\");\r\n            }\r\n            if (typeof (keySelector) !== \"function\") {\r\n                throw new Error(\"null argument keySelector\");\r\n            }\r\n            if (typeof (elementSelector) !== \"function\") {\r\n                throw new Error(\"null argument elementSelector\");\r\n            }\r\n\r\n            return Lookup.create(source, keySelector, elementSelector/*, comparer*/);\r\n        }\r\n\r\n        // TODO\r\n        // public static toQuery(): string {\r\n\r\n        // }\r\n\r\n        public static union<TSource>(source: Iterable<TSource>, sequence: Iterable<TSource>): IEnumerable<TSource> {\r\n            let iterator = new UnionIterator(source, sequence);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static where<TSource>(source: Iterable<TSource>, predicate: PredicateFunc<TSource>): IEnumerable<TSource> {\r\n            let iterator = new WhereIterator(source, predicate);\r\n            return new Enumerable(iterator);\r\n        }\r\n\r\n        public static zip<TFirst, TSecond, TResult>(source: Iterable<TFirst>, sequence: Iterable<TSecond>, selector: ResultSelectorFunc<TFirst, TSecond, TResult>): IEnumerable<TResult> {\r\n            var iterator = new ZipIterator(source, sequence, selector);\r\n            return new Enumerable(iterator);\r\n        }\r\n    }\r\n\r\n\r\n    export abstract class IterableEnumerable<TSource> implements IEnumerable<TSource> {\r\n\r\n        public abstract [Symbol.iterator](): Iterator<TSource>;\r\n\r\n\r\n        public aggregate<TAccumulate = TSource, TResult = TAccumulate>(func: AccumulatorFunc<TAccumulate, TSource, TAccumulate>): TResult;\r\n        public aggregate<TAccumulate = TSource, TResult = TAccumulate>(seed: TAccumulate, func: AccumulatorFunc<TAccumulate, TSource, TAccumulate>): TResult;\r\n        public aggregate<TAccumulate = TSource, TResult = TAccumulate>(seed: TAccumulate, func: AccumulatorFunc<TAccumulate, TSource, TAccumulate>, resultSelector: SelectorFunc<TAccumulate, TResult>): TResult;\r\n        public aggregate<TAccumulate = TSource, TResult = TAccumulate>(\r\n            seed: TAccumulate | AccumulatorFunc<TAccumulate, TSource, TAccumulate>,\r\n            func?: AccumulatorFunc<TAccumulate, TSource, TAccumulate> | SelectorFunc<TAccumulate, TResult>,\r\n            resultSelector?: SelectorFunc<TAccumulate, TResult>\r\n        ): TResult {\r\n            let seedArg: TAccumulate = null;\r\n            let funcArg: AccumulatorFunc<TAccumulate, TSource, TAccumulate> = null;\r\n            let resultFuncArg: SelectorFunc<TAccumulate, TResult> = null;\r\n\r\n            if (typeof seed === \"function\") {\r\n                funcArg = <AccumulatorFunc<TAccumulate, TSource, TAccumulate>>seed;\r\n                resultFuncArg = <SelectorFunc<TAccumulate, TResult>>func;\r\n            } else {\r\n                seedArg = seed;\r\n                funcArg = <AccumulatorFunc<TAccumulate, TSource, TAccumulate>>func;\r\n                if (funcArg === null || funcArg === undefined)\r\n                    throw new Error(\"null func\");\r\n                resultFuncArg = resultSelector;\r\n            }\r\n\r\n            return EnumerableExtensions.aggregate<TSource, TAccumulate, TResult>(this, seedArg, funcArg, resultFuncArg);\r\n        }\r\n\r\n        public all(predicate: PredicateFunc<TSource>): boolean {\r\n            if (predicate === undefined || predicate === null) {\r\n                throw new Error(\"null predicate\");\r\n            }\r\n            return EnumerableExtensions.all(this, predicate);\r\n        }\r\n\r\n        public any(predicate?: PredicateFunc<TSource>): boolean {\r\n            if (predicate !== undefined && predicate === null) {\r\n                throw new Error(\"null predicate\");\r\n            }\r\n            return EnumerableExtensions.any(this, predicate);\r\n        }\r\n\r\n        public append(item: TSource): IEnumerable<TSource> {\r\n            return EnumerableExtensions.append(this, item);\r\n        }\r\n\r\n        /*NON STANDARD*/public average(ignoreNonNumberItems?: boolean): number;\r\n        public average(selector?: SelectorFunc<TSource, number>): number;\r\n        public average(selectorOrIgnore?: SelectorFunc<TSource, number> | boolean): number {\r\n            let selectorArg: SelectorFunc<TSource, number>;\r\n            let ignoreNonNumber = false;\r\n            if (typeof selectorOrIgnore === \"function\") {\r\n                selectorArg = selectorOrIgnore;\r\n            } else {\r\n                ignoreNonNumber = selectorOrIgnore;\r\n            }\r\n            return EnumerableExtensions.average(this, selectorArg, ignoreNonNumber);\r\n        }\r\n\r\n        public concat(sequence: Iterable<TSource>): IEnumerable<TSource> {\r\n            return EnumerableExtensions.concat(this, sequence);\r\n        }\r\n\r\n        public contains(value: TSource, comparer?: EqualityComparerFunc<TSource>): boolean {\r\n            return EnumerableExtensions.contains(this, value, comparer);\r\n        }\r\n\r\n        public count(predicate?: PredicateFunc<TSource>): number {\r\n            return EnumerableExtensions.count(this, predicate);\r\n        }\r\n\r\n        public defaultIfEmpty(defaultValue: TSource): IEnumerable<TSource> {\r\n            return EnumerableExtensions.defaultIfEmpty(this, defaultValue);\r\n        }\r\n\r\n        public distinct(): IEnumerable<TSource> {\r\n            return EnumerableExtensions.distinct(this);\r\n        }\r\n\r\n        public elementAt(index: number): TSource {\r\n            return EnumerableExtensions.elementAt(this, index);\r\n        }\r\n\r\n        public elementAtOrDefault(index: number): TSource {\r\n            return EnumerableExtensions.elementAtOrDefault(this, index);\r\n        }\r\n\r\n        public except(sequence: Iterable<TSource>): IEnumerable<TSource> {\r\n            return EnumerableExtensions.except(this, sequence);\r\n        }\r\n\r\n        public first(predicate?: PredicateFunc<TSource>): TSource {\r\n\r\n            return EnumerableExtensions.first(this, predicate);\r\n        }\r\n\r\n        public firstOrDefault(predicate: PredicateFunc<TSource>): TSource {\r\n            return EnumerableExtensions.firstOrDefault(this, predicate);\r\n        }\r\n\r\n        public groupBy<TKey>(keySelector: SelectorFunc<TSource, TKey>): IEnumerable<IGrouping<TKey, TSource>>;\r\n        public groupBy<TKey, TElement = TSource>(keySelector: SelectorFunc<TSource, TKey>, elementSelector: SelectorFunc<TSource, TElement>): IEnumerable<IGrouping<TKey, TElement>>;\r\n        public groupBy<TKey, TElement = TSource, TResult = TElement>(keySelector: SelectorFunc<TSource, TKey>, elementSelector: SelectorFunc<TSource, TElement>, resultSelector: GroupResultSelectorFunc<TKey, TElement, TResult>): IEnumerable<IGrouping<TKey, TResult>>;\r\n        public groupBy<TKey, TElement = TSource, TResult = TElement>(\r\n            keySelector: SelectorFunc<TSource, TKey>,\r\n            elementSelector?: SelectorFunc<TSource, TElement>,\r\n            resultSelector?: GroupResultSelectorFunc<TKey, TElement, TResult>\r\n        ): IEnumerable<IGrouping<TKey, TSource>> | IEnumerable<IGrouping<TKey, TElement>> | IEnumerable<TResult> {\r\n            // if(typeof resultSelector === \"function\") {\r\n            //     return EnumerableExtensions.groupByResult(this, keySelector, elementSelector, resultSelector);\r\n            // } else {\r\n            //     return EnumerableExtensions.groupByElement(this, keySelector, elementSelector);\r\n            // }\r\n            return EnumerableExtensions.groupBy(this, keySelector, elementSelector, resultSelector);\r\n        }\r\n\r\n        // public groupByWithCompare<TKey>(keySelector: SelectorFunc<TSource, TKey>, comparer: EqualityComparerFunc<TKey>): IEnumerable<IGrouping<TKey, TSource>>;\r\n        // public groupByWithCompare<TKey, TElement = TSource>(keySelector: SelectorFunc<TSource, TKey>, elementSelector: SelectorFunc<TSource, TElement>, comparer: EqualityComparerFunc<TKey>): IEnumerable<IGrouping<TKey, TElement>>;\r\n        // public groupByWithCompare<TKey, TElement = TSource, TResult = TElement>(keySelector: SelectorFunc<TSource, TKey>, elementSelector: SelectorFunc<TSource, TElement>, resultSelector: ResultSelectorFunc<TKey, Iterable<TElement>, TResult>, comparer: EqualityComparerFunc<TKey>): IEnumerable<IGrouping<TKey, TResult>>;\r\n        // public groupByWithCompare<TKey, TElement = TSource, TResult = TElement>(\r\n        //     keySelector: SelectorFunc<TSource, TKey>,\r\n        //     elementSelector?: SelectorFunc<TSource, TElement>,\r\n        //     resultSelector?: ResultSelectorFunc<TKey, Iterable<TElement>, TResult>,\r\n        //     comparer?: EqualityComparerFunc<TKey>\r\n        // ): IEnumerable<IGrouping<TKey, TSource>> | IEnumerable<IGrouping<TKey, TElement>> | IEnumerable<IGrouping<TKey, TResult>> {\r\n        //     if (typeof resultSelector === \"function\") {\r\n        //         return EnumerableExtensions.groupTResultBy(this, keySelector, elementSelector, resultSelector, comparer);\r\n        //     } else {\r\n        //         if (typeof elementSelector === \"function\") {\r\n        //             return EnumerableExtensions.groupTElementBy(this, keySelector, elementSelector, comparer);\r\n        //         } else {\r\n        //             return EnumerableExtensions.groupTSourceBy(this, keySelector, comparer);\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        public groupJoin<TKey, TInner, TResult>(\r\n            innerSequence: Iterable<TInner>,\r\n            outerKeySelector: SelectorFunc<TSource, TKey>,\r\n            innerKeySelector: SelectorFunc<TInner, TKey>,\r\n            resultSelector: GroupResultSelectorFunc<TSource, TInner, TResult>,\r\n            comparer: EqualityComparerFunc<TKey>\r\n        ): IEnumerable<TResult> {\r\n            return EnumerableExtensions.groupJoin(this, innerSequence, outerKeySelector, innerKeySelector, resultSelector, comparer);\r\n        }\r\n\r\n        public intersect(sequence: Iterable<TSource>): IEnumerable<TSource> {\r\n            return EnumerableExtensions.intersect(this, sequence);\r\n        }\r\n\r\n        public join<TKey, TInner, TResult>(\r\n            innerSequence: Iterable<TInner>,\r\n            outerKeySelector: SelectorFunc<TSource, TKey>,\r\n            innerKeySelector: SelectorFunc<TInner, TKey>,\r\n            resultSelector: ResultSelectorFunc<TSource, TInner, TResult>,\r\n            comparer?: EqualityComparerFunc<TKey>\r\n        ): IEnumerable<TResult> {\r\n            return EnumerableExtensions.join(this, innerSequence, outerKeySelector, innerKeySelector, resultSelector, comparer);\r\n        }\r\n\r\n        public last(predicate: PredicateFunc<TSource>): TSource {\r\n            return EnumerableExtensions.last(this, predicate);\r\n        }\r\n\r\n        public lastOrDefault(predicate: PredicateFunc<TSource>): TSource {\r\n            return EnumerableExtensions.lastOrDefault(this, predicate);\r\n        }\r\n\r\n        /*NON STANDARD*/public max(ignoreNonNumberItems?: boolean): number;\r\n        public max(selector?: SelectorFunc<TSource, number>): number;\r\n        public max(selectorOrIgnore?: SelectorFunc<TSource, number> | boolean): number {\r\n            let selectorArg: SelectorFunc<TSource, number>;\r\n            let ignoreNonNumber = false;\r\n            if (typeof selectorOrIgnore === \"function\") {\r\n                selectorArg = selectorOrIgnore;\r\n            } else {\r\n                ignoreNonNumber = selectorOrIgnore;\r\n            }\r\n            return EnumerableExtensions.max(this, selectorArg, ignoreNonNumber);\r\n        }\r\n\r\n        /*NON STANDARD*/public min(ignoreNonNumberItems?: boolean): number;\r\n        public min(selector?: SelectorFunc<TSource, number>): number;\r\n        public min(selectorOrIgnore?: SelectorFunc<TSource, number> | boolean): number {\r\n            let selectorArg: SelectorFunc<TSource, number>;\r\n            let ignoreNonNumber = false;\r\n            if (typeof selectorOrIgnore === \"function\") {\r\n                selectorArg = selectorOrIgnore;\r\n            } else {\r\n                ignoreNonNumber = selectorOrIgnore;\r\n            }\r\n            return EnumerableExtensions.min(this, selectorArg, ignoreNonNumber);\r\n        }\r\n\r\n        public ofType<TResult>(type: new () => TResult): IEnumerable<TResult> {\r\n            return EnumerableExtensions.ofType(this, type);\r\n        }\r\n\r\n        public orderBy<TKey>(keySelector: SelectorFunc<TSource, TKey>): IOrderedEnumerable<TSource> {\r\n            return EnumerableExtensions.orderBy(this, keySelector);\r\n        }\r\n\r\n        public orderByDescending<TKey>(keySelector: SelectorFunc<TSource, TKey>): IOrderedEnumerable<TSource> {\r\n            return EnumerableExtensions.orderByDescending(this, keySelector);\r\n        }\r\n\r\n        public prepend(item: TSource): IEnumerable<TSource> {\r\n            return EnumerableExtensions.prepend(this, item);\r\n        }\r\n\r\n        public reverse(): IEnumerable<TSource> {\r\n            return EnumerableExtensions.reverse(this);\r\n        }\r\n\r\n        public select<TResult>(selector: SelectorFunc<TSource, TResult>): IEnumerable<TResult> {\r\n            return EnumerableExtensions.select(this, selector);\r\n        }\r\n\r\n        public selectMany<TResult>(selector: SelectorFunc<TSource, Iterable<TResult>>): IEnumerable<TResult> {\r\n            return EnumerableExtensions.selectMany(this, selector);\r\n        }\r\n\r\n        public sequenceEqual(other: Iterable<TSource>, comparer?: EqualityComparerFunc<TSource>): boolean {\r\n            return EnumerableExtensions.sequenceEqual(this, other, comparer);\r\n        }\r\n\r\n        public single(predicate?: PredicateFunc<TSource>): TSource {\r\n            return EnumerableExtensions.single(this, predicate);\r\n        }\r\n\r\n        public singleOrDefault?(predicate: PredicateFunc<TSource>): TSource {\r\n            return EnumerableExtensions.singleOrDefault(this, predicate);\r\n        }\r\n\r\n        public skip(count: number): IEnumerable<TSource> {\r\n            return EnumerableExtensions.skip(this, count);\r\n        }\r\n\r\n        public skipLast(count: number): IEnumerable<TSource> {\r\n            return EnumerableExtensions.skipLast(this, count);\r\n        }\r\n\r\n        public skipWhile(predicate: PredicateFunc<TSource>): IEnumerable<TSource> {\r\n            return EnumerableExtensions.skipWhile(this, predicate);\r\n        }\r\n\r\n        /*NON STANDARD*/public sum(ignoreNonNumberItems?: boolean): number;\r\n        public sum(selector?: SelectorFunc<TSource, number>): number;\r\n        public sum(selectorOrIgnore?: SelectorFunc<TSource, number> | boolean) {\r\n            let selectorArg: SelectorFunc<TSource, number>;\r\n            let ignoreNonNumber = false;\r\n            if (typeof selectorOrIgnore === \"function\") {\r\n                selectorArg = selectorOrIgnore;\r\n            } else {\r\n                ignoreNonNumber = selectorOrIgnore;\r\n            }\r\n            return EnumerableExtensions.sum(this, selectorArg, ignoreNonNumber);\r\n        }\r\n\r\n        public take(count: number): IEnumerable<TSource> {\r\n            return EnumerableExtensions.take(this, count);\r\n        }\r\n\r\n        public takeLast(count: number): IEnumerable<TSource> {\r\n            return EnumerableExtensions.takeLast(this, count);\r\n        }\r\n\r\n        public takeWhile(predicate: PredicateFunc<TSource>): IEnumerable<TSource> {\r\n            return EnumerableExtensions.takeWhile(this, predicate);\r\n        }\r\n\r\n        public toArray(): TSource[] {\r\n            return EnumerableExtensions.toArray(this);\r\n        }\r\n\r\n        public toDictionary<TKey, TValue>(\r\n            keySelector: SelectorFunc<TSource, TKey>,\r\n            elementSelector: SelectorFunc<TSource, TValue>,\r\n            comparer: EqualityComparerFunc<TKey>\r\n        ): Map<TKey, TValue> {\r\n            return EnumerableExtensions.toDictionary(this, keySelector, elementSelector, comparer);\r\n        }\r\n\r\n        public toLookup<TKey, TElement = TSource>(keySelector: SelectorFunc<TSource, TKey>, elementSelector?: SelectorFunc<TSource, TElement>, comparer?: EqualityComparerFunc<TKey>): ILookup<TKey, TElement> {\r\n            return EnumerableExtensions.toLookup(this, keySelector, elementSelector, comparer);\r\n        }\r\n\r\n        public union(sequence: Iterable<TSource>): IEnumerable<TSource> {\r\n            return EnumerableExtensions.union(this, sequence);\r\n        }\r\n\r\n        public where(predicate: PredicateFunc<TSource>): IEnumerable<TSource> {\r\n            return EnumerableExtensions.where(this, predicate);\r\n        }\r\n\r\n        public zip<TSecond, TResult>(sequence: Iterable<TSecond>, resultSelector: ResultSelectorFunc<TSource, TSecond, TResult>): IEnumerable<TResult> {\r\n            return EnumerableExtensions.zip(this, sequence, resultSelector);\r\n        }\r\n    }\r\n\r\n    export class Enumerable<T>\r\n        extends IterableEnumerable<T>\r\n        implements IEnumerable<T> {\r\n\r\n        public static from<TSource>(source: Iterable<TSource>): IEnumerable<TSource> {\r\n            // TODO perform checks\r\n            return new Enumerable(source);\r\n        }\r\n\r\n        public static range(start: number, end: number): IEnumerable<number>;\r\n        public static range(start: number, end: number, step?: number): IEnumerable<number> {\r\n            return EnumerableExtensions.range(start, end, step);\r\n        }\r\n\r\n        public static repeat<TResult>(element: TResult, count: number): IEnumerable<TResult> {\r\n            return EnumerableExtensions.repeat<TResult>(element, count);\r\n        }\r\n\r\n        public static repeatElement<TResult>(callback: (index: number) => TResult, count: number, userData?: any): IEnumerable<TResult> {\r\n            return EnumerableExtensions.repeatElement<TResult>(callback, count, userData);\r\n        }\r\n\r\n        public static empty<TSource>(): IEnumerable<TSource>  {\r\n            return EnumerableExtensions.empty<TSource>();\r\n        }\r\n\r\n\r\n        protected _source: Iterable<T>\r\n\r\n        constructor(source: Iterable<T> | Iterator<T>) {\r\n            super();\r\n\t\t\tif (isIterator(source)) {\r\n\t\t\t\tthis._source = new IteratorIterableWrapper(source);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._source = source;\r\n\t\t\t}\r\n            \r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            for (let item of this._source) {\r\n                yield item;\r\n            }\r\n        }\r\n    }\r\n\r\n\texport class OrderedEnumerable<T> \r\n\t\textends Enumerable<T>\r\n\t\timplements IOrderedEnumerable<T> {\r\n\r\n\t\tconstructor(source: OrderedIterable<T>) {\r\n\t\t\tsuper(source);\r\n\t\t}\r\n\r\n\t\tpublic thenBy<TKey>(keySelector: SelectorFunc<T, TKey>): IOrderedEnumerable<T> {\r\n\t\t\treturn EnumerableExtensions.thenBy(this._source as OrderedIterable<T>, keySelector);\r\n\t\t}\r\n\r\n\t\tpublic thenByDescending<TKey>(keySelector: SelectorFunc<T, TKey>): IOrderedEnumerable<T> {\r\n\t\t\treturn EnumerableExtensions.thenByDescending(this._source as OrderedIterable<T>, keySelector);\r\n\t\t}\r\n\t}\r\n}","/// <reference path=\"Functions.ts\" />\r\n\r\nnamespace Linq {\r\n\r\n    export abstract class Generator<T> {\r\n\r\n        protected _index: number;\r\n        protected _current: T;\r\n\r\n\t\tconstructor() {\r\n\t\t\tthis._index = -1;\r\n\t\t\tthis._current = null;\r\n\t\t}\r\n\r\n        public get index() {\r\n            return this._index;\r\n        }\r\n\r\n        public get current() {\r\n            return this._current;\r\n        }\r\n\r\n        public reset(): void {\r\n            this._index = -1;\r\n            this._current = null;\r\n        }\r\n\r\n        public abstract [Symbol.iterator](): Iterator<T>;\r\n    }\r\n\r\n    export class UserGenerator<T> extends Generator<T> {\r\n\r\n        private callback: (index: number, userData?: any) => any;\r\n        private count: number;\r\n        private userData: any;\r\n\r\n        constructor(callback: (index: number, userData?: any) => any, count: number, userData: any) {\r\n            super();\r\n            this.callback = callback;\r\n            this.count = count;\r\n            this.userData = userData;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            for (let i = 0; i < this.count; i++) {\r\n                this._index++;\r\n                let result = this.callback(this.index, this.userData);\r\n                if (typeof result !== \"undefined\") {\r\n                    this._current = result;\r\n                    yield result;\r\n                }\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class NumberGenerator extends Generator<number> {\r\n\r\n        private start: number;\r\n        private end: number;\r\n        private step: number;\r\n        private currentValue: number;\r\n\r\n        constructor(start: number, end: number, step: number) {\r\n            super();\r\n            this.start = start;\r\n            this.end = end;\r\n            this.step = step || 1;\r\n            this._current = this.start - this.step;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<number> {\r\n            let count = this.end - this.start;\r\n            for (let i = 0; i < count; i += this.step) {\r\n                this._index = i;\r\n                this._current = this.start + i;\r\n                yield this._current;\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class KeyValueGenerator<TSource, TKey, TValue=TSource> extends Generator<{ key: TKey, value: TValue }> {\r\n\r\n        private _iterable: Iterable<TSource>;\r\n        private _keySelector: SelectorFunc<TSource, TKey>;\r\n        private _valueSelector: SelectorFunc<TSource, TValue>;\r\n\r\n        constructor(iterable: Iterable<TSource>, keySelector: SelectorFunc<TSource, TKey>, valueSelector?: SelectorFunc<TSource, TValue>) {\r\n            super();\r\n            this._iterable = iterable;\r\n            this._keySelector = keySelector;\r\n            this._valueSelector = valueSelector;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<{ key: TKey, value: TValue }> {\r\n            for (let element of this._iterable) {\r\n                this._index++;\r\n                var key = this._keySelector(element, this.index);\r\n                let value: TValue;\r\n                if (this._valueSelector) {\r\n                    value = this._valueSelector(element, this.index);\r\n                } else {\r\n                    value = <TValue><any>element;\r\n                }\r\n                yield { key: key, value: value };\r\n            }\r\n\t\t\tthis.reset();\r\n        }\r\n    }\r\n}","\r\nnamespace Linq {\r\n\r\n    function assert(expression: () => boolean) : void {\r\n        if(!expression()) {\r\n            throw new Error(\"Assert fail: \" + expression.toString());\r\n        }\r\n    }\r\n\r\n    export interface IGrouping<TKey, TElement> extends IEnumerable<TElement> {\r\n        readonly key: TKey;\r\n    }\r\n\r\n    export class Grouping<TKey, TElement>\r\n        extends IterableEnumerable<TElement>\r\n        implements IGrouping<TKey, TElement> {\r\n\r\n        #elements: Iterable<TElement>;\r\n\r\n        constructor(key: TKey, elements: Iterable<TElement>) {\r\n            super();\r\n            this.key = key;\r\n            this.#elements = elements;\r\n        }\r\n\r\n        public readonly key: TKey;\r\n\r\n        public *[Symbol.iterator](): Iterator<TElement> {\r\n\t\t\t//return this.#elements;\r\n            for (const element of this.#elements) {\r\n                yield element;\r\n            }\r\n        }\r\n    }\r\n\r\n    export class GroupedEnumerable<TSource, TKey, TElement = TSource>\r\n        extends IterableEnumerable<IGrouping<TKey, TElement>>\r\n        implements IEnumerable<IGrouping<TKey, TElement>>\r\n    {\r\n        private readonly _source: Iterable<TSource>;\r\n        private readonly _keySelector: SelectorFunc<TSource, TKey>;\r\n        private readonly _elementSelector: SelectorFunc<TSource, TElement>;\r\n        //private readonly _comparer?: EqualityComparerFunc<TKey>;\r\n        private _lookup: Lookup<TKey, TElement> = null;\r\n\r\n        constructor(source: Iterable<TSource>, keySelector: SelectorFunc<TSource, TKey>, elementSelector?: SelectorFunc<TSource, TElement>/*, comparer?: EqualityComparerFunc<TKey>*/) {\r\n            super();\r\n\r\n            assert(() => source != null);\r\n            assert(() => typeof keySelector === \"function\");\r\n            assert(() => typeof keySelector === \"function\");\r\n\r\n            this._source = source;\r\n            this._keySelector = keySelector;\r\n            this._elementSelector = elementSelector;\r\n            //this._comparer = comparer;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<IGrouping<TKey, TElement>> {\r\n            if(this._lookup == null) {\r\n                this._lookup = Lookup.create(this._source, this._keySelector, this._elementSelector);\r\n            }\r\n            //return this._lookup;\r\n            for (const element of this._lookup) {\r\n                yield element;\r\n            }\r\n        }\r\n    }\r\n\r\n    export class GroupedResultEnumerable<TSource, TKey, TElement, TResult>\r\n        extends IterableEnumerable<TResult>\r\n        implements IEnumerable<TResult>\r\n    {\r\n        private readonly _source: Iterable<TSource>;\r\n        private readonly _keySelector: SelectorFunc<TSource, TKey>;\r\n        private readonly _elementSelector: SelectorFunc<TSource, TElement>;\r\n        private readonly _resultSelector: GroupResultSelectorFunc<TKey, TElement, TResult>;\r\n        //private readonly _comparer?: EqualityComparerFunc<TKey>;\r\n        private _lookup: Lookup<TKey, TElement> = null;\r\n\r\n        constructor(source: Iterable<TSource>, keySelector: SelectorFunc<TSource, TKey>, elementSelector: SelectorFunc<TSource, TElement>, resultSelector: GroupResultSelectorFunc<TKey, TElement, TResult>/*, comparer?: EqualityComparerFunc<TKey>*/) {\r\n            super();\r\n\r\n            assert(() => source != null);\r\n            assert(() => typeof keySelector === \"function\");\r\n            assert(() => typeof keySelector === \"function\");\r\n\r\n            this._source = source;\r\n            this._keySelector = keySelector;\r\n            this._elementSelector = elementSelector;\r\n            this._resultSelector = resultSelector;\r\n            //this._comparer = comparer;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<TResult> {\r\n            if(this._lookup == null) {\r\n                this._lookup = Lookup.create(this._source, this._keySelector, this._elementSelector);\r\n            }\r\n            for (const element of this._lookup) {\r\n                yield this._resultSelector(element.key, element)\r\n            }\r\n        }\r\n    }\r\n}","/// <reference path=\"Functions.ts\" />\r\n\r\nnamespace Linq {\r\n\r\n    export interface SourceIterator<T> extends Iterable<T> {\r\n        readonly index: number;\r\n        readonly current: T;\r\n        [Symbol.iterator](): Iterator<T>;\r\n    }\r\n\r\n    export abstract class BaseIterator<TSource> implements SourceIterator<TSource>  {\r\n\r\n        protected _index: number = -1;\r\n        protected _current: TSource = null;\r\n\r\n        constructor(iterable: Iterable<TSource>) {\r\n            this.iterable = iterable;\r\n            this.reset();\r\n        }\r\n\r\n        protected readonly iterable: Iterable<TSource>;\r\n\r\n        public get index(): number {\r\n            return this._index;\r\n        }\r\n\r\n        public get current(): TSource {\r\n            return this._current;\r\n        }\r\n\r\n        public reset() {\r\n            this._index = -1;\r\n            this._current = null;\r\n        }\r\n\r\n        public abstract [Symbol.iterator](): Iterator<TSource>;\r\n    }\r\n\r\n    export abstract class SourceResultIterator<TSource, TResult> implements SourceIterator<TResult>  {\r\n\r\n        protected _index: number = -1;\r\n        protected _current: TResult = null;\r\n\r\n        constructor(iterable: Iterable<TSource>) {\r\n            this.iterable = iterable;\r\n            this.reset();\r\n        }\r\n\r\n        protected readonly iterable: Iterable<TSource>;\r\n\r\n        public get index(): number {\r\n            return this._index;\r\n        }\r\n\r\n        public get current(): TResult {\r\n            return this._current;\r\n        }\r\n\r\n        public reset() {\r\n            this._index = -1;\r\n            this._current = null;\r\n        }\r\n\r\n        public abstract [Symbol.iterator](): Iterator<TResult>;\r\n    }\r\n\r\n    export class SimpleIterator<TSource> extends BaseIterator<TSource> {\r\n\r\n        constructor(iterable: Iterable<TSource>) {\r\n            super(iterable);\r\n\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<TSource> {\r\n            for (let item of this.iterable) {\r\n                this._index++;\r\n                this._current = item;\r\n                yield item;\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class AppendIterator<T> extends BaseIterator<T> {\r\n\r\n        private _item: T;\r\n\r\n        constructor(iterable: Iterable<T>, item: T) {\r\n            super(iterable);\r\n            this._item = item;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            let result;\r\n            for (let item of this.iterable) {\r\n                this._index++;\r\n                this._current = item;\r\n                yield this.current;\r\n            }\r\n            this._index++;\r\n            this._current = this._item;\r\n            yield this._item;\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class ConcatIterator<T> extends BaseIterator<T> {\r\n\r\n        private _other: Iterable<T>;\r\n\r\n        constructor(iterable: Iterable<T>, other: Iterable<T>) {\r\n            super(iterable);\r\n            this._other = other;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            for (let element of this.iterable) {\r\n                this._index++;\r\n                this._current = element;\r\n                yield element;\r\n            }\r\n            for (let element of this._other) {\r\n                this._index++;\r\n                this._current = element;\r\n                yield element;\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class DefaultIfEmptyIterator<T> extends BaseIterator<T> {\r\n\r\n        private _defaultValue: T;\r\n\r\n        constructor(iterable: Iterable<T>, defaultValue: T) {\r\n            super(iterable);\r\n            this._defaultValue = defaultValue;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            let count = 0;\r\n            for (let element of this.iterable) {\r\n                count++;\r\n                this._index++;\r\n                this._current = element;\r\n                yield element;\r\n            }\r\n            if (count == 0) {\r\n                yield this._defaultValue;\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class DistinctIterator<T> extends BaseIterator<T> {\r\n\r\n        private _values: Set<T>;\r\n\r\n        constructor(iterable: Iterable<T>) {\r\n            super(iterable);\r\n            this._values = new Set<T>();\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            for (let element of this.iterable) {\r\n                if (!this._values.has(element)) {\r\n                    this._values.add(element);\r\n                    this._index++;\r\n                    this._current = element;\r\n                    yield element;\r\n                }\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class ExceptIterator<T> extends BaseIterator<T> {\r\n\r\n        private _other: Iterable<T>;\r\n\r\n        constructor(iterable: Iterable<T>, other: Iterable<T>) {\r\n            super(iterable);\r\n            this._other = other;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            let otherArray = Array.from(this._other);\r\n            for (let element of this.iterable) {\r\n                if (otherArray.indexOf(element) < 0) {\r\n                    this._index++;\r\n                    this._current = element;\r\n                    yield element;\r\n                }\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class GroupIterator<TSource, TKey>\r\n        extends SourceResultIterator<TSource, IGrouping<TKey, TSource>> {\r\n\r\n        private _keySelector: SelectorFunc<TSource, TKey>;\r\n\r\n        constructor(\r\n            iterable: Iterable<TSource>,\r\n            keySelector: SelectorFunc<TSource, TKey>\r\n        ) {\r\n            super(iterable);\r\n            this._keySelector = keySelector;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<IGrouping<TKey, TSource>> {\r\n\r\n            // TODO: use lookup?\r\n\r\n            let groups = new Map<TKey, TSource[]>();\r\n\r\n            for (let item of this.iterable) {\r\n                this._index++;\r\n                let key = this._keySelector(item, this.index);\r\n                if (groups.has(key)) {\r\n                    groups.get(key).push(item);\r\n                }\r\n                else {\r\n                    groups.set(key, [item]);\r\n                }\r\n            }\r\n\r\n            for (let entry of groups) {\r\n                let g = new Grouping<TKey, TSource>(entry[0], entry[1]);\r\n                this._current = g;\r\n                yield this.current;\r\n            }\r\n\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class GroupElementIterator<TSource, TKey, TElement>\r\n        extends SourceResultIterator<TSource, IGrouping<TKey, TElement>> {\r\n\r\n        private _keySelector: SelectorFunc<TSource, TKey>;\r\n        private _elementSelector: SelectorFunc<TSource, TElement>;\r\n\r\n        constructor(\r\n            iterable: Iterable<TSource>,\r\n            keySelector: SelectorFunc<TSource, TKey>,\r\n            elementSelector: SelectorFunc<TSource, TElement>\r\n        ) {\r\n            super(iterable);\r\n            this._keySelector = keySelector;\r\n            this._elementSelector = elementSelector;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<IGrouping<TKey, TElement>> {\r\n\r\n            let groups = new Map<TKey, TElement[]>();\r\n\r\n            for (let item of this.iterable) {\r\n                this._index++;\r\n                let key = this._keySelector(item, this.index);\r\n                let element = this._elementSelector(item, this.index);\r\n                if (groups.has(key)) {\r\n                    groups.get(key).push(element);\r\n                }\r\n                else {\r\n                    groups.set(key, [element]);\r\n                }\r\n            }\r\n\r\n            for (let entry of groups) {\r\n                var group = new Grouping(entry[0], entry[1]);\r\n                this._current = group;\r\n                yield this.current;\r\n            }\r\n\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class GroupResultIterator<TSource, TKey, TElement, TResult> \r\n        extends SourceResultIterator<TSource, TResult> {\r\n\r\n        private _keySelector: SelectorFunc<TSource, TKey>;\r\n        private _elementSelector: SelectorFunc<TSource, TElement>;\r\n        private _resultSelector: GroupResultSelectorFunc<TKey, TElement, TResult>;\r\n\r\n        constructor(\r\n            iterable: Iterable<TSource>,\r\n            keySelector: SelectorFunc<TSource, TKey>,\r\n            elementSelector: SelectorFunc<TSource, TElement>,\r\n            resultSelector: GroupResultSelectorFunc<TKey, TElement, TResult>\r\n        ) {\r\n            super(iterable);\r\n            this._keySelector = keySelector;\r\n            this._elementSelector = elementSelector;\r\n            this._resultSelector = resultSelector;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<TResult> {\r\n\r\n            let groups = new Map<TKey, TElement[]>();\r\n\r\n            for (let item of this.iterable) {\r\n                this._index++;\r\n                let key = this._keySelector(item, this.index);\r\n                let element = this._elementSelector(item, this.index);\r\n                if (groups.has(key)) {\r\n                    groups.get(key).push(element);\r\n                }\r\n                else {\r\n                    groups.set(key, [element]);\r\n                }\r\n            }\r\n\r\n            for (let entry of groups) {\r\n                let result = this._resultSelector(entry[0], entry[1]);\r\n                yield result;\r\n            }\r\n\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class GroupJoinIterator<TSource, TKey, TInner = TSource, TResult = TInner>\r\n        extends SourceResultIterator<TSource, TResult> {\r\n\r\n        private _keySelector: SelectorFunc<TSource, TKey>;\r\n        private _innerSequence: Iterable<TInner>;\r\n        private _innerKeySelector: SelectorFunc<TInner, TKey>;\r\n        private _resultSelector: GroupResultSelectorFunc<TSource, TInner, TResult>;\r\n\r\n        constructor(\r\n            iterable: Iterable<TSource>,\r\n            keySelector: SelectorFunc<TSource, TKey>,\r\n            innerSequence: Iterable<TInner>,\r\n            innerKeySelector: SelectorFunc<TInner, TKey>,\r\n            resultSelector: GroupResultSelectorFunc<TSource, TInner, TResult>\r\n        ) {\r\n            super(iterable);\r\n            this._keySelector = keySelector;\r\n            this._innerSequence = innerSequence;\r\n            this._innerKeySelector = innerKeySelector;\r\n            this._resultSelector = resultSelector || ((key, inner) => <TResult><any>inner);\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<TResult> {\r\n            let lookup = Lookup.createForJoin<TKey, TInner>(this._innerSequence, this._innerKeySelector);\r\n            for (let item of this.iterable) {\r\n                let key = this._keySelector(item);\r\n                yield this._resultSelector(item, lookup.item(key));\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    // export class GroupJoinResultIterator<TSource, TKey, TInner = TSource, TResult = TInner>\r\n    //     extends SourceResultIterator<TSource, TResult> {\r\n\r\n    //     private _keySelector: SelectorFunc<TSource, TKey>;\r\n    //     private _innerSequence: Iterable<TInner>;\r\n    //     private _innerKeySelector: SelectorFunc<TInner, TKey>;\r\n    //     private _resultSelector: GroupResultSelectorFunc<TSource, TInner, TResult>;\r\n\r\n    //     constructor(\r\n    //         iterable: Iterable<TSource>,\r\n    //         keySelector: SelectorFunc<TSource, TKey>,\r\n    //         innerSequence: Iterable<TInner>,\r\n    //         innerKeySelector: SelectorFunc<TInner, TKey>,\r\n    //         resultSelector: GroupResultSelectorFunc<TSource, TInner, TResult>\r\n    //     ) {\r\n    //         super(iterable);\r\n    //         this._keySelector = keySelector;\r\n    //         this._innerSequence = innerSequence;\r\n    //         this._innerKeySelector = innerKeySelector;\r\n    //         this._resultSelector = resultSelector;\r\n    //     }\r\n\r\n    //     public *[Symbol.iterator](): Iterator<TResult> {\r\n    //         let lookup = Lookup.createForJoin<TKey, TInner>(this._innerSequence, this._innerKeySelector);\r\n    //         for (let item of this.iterable) {\r\n    //             let key = this._keySelector(item);\r\n    //             yield this._resultSelector(item, lookup.item(key));\r\n    //         }\r\n    //         this.reset();\r\n    //     }\r\n    // }\r\n\r\n    // JoinIterator\r\n\r\n    export class IntersectIterator<T> extends BaseIterator<T> {\r\n\r\n        private _other: Iterable<T>;\r\n\r\n        constructor(iterable: Iterable<T>, other: Iterable<T>) {\r\n            super(iterable);\r\n            this._other = other;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            let otherArray = Array.from(this._other);\r\n            for (let element of this.iterable) {\r\n                if (otherArray.indexOf(element) >= 0) {\r\n                    this._index++;\r\n                    this._current = element;\r\n                    yield element;\r\n                }\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class JoinIterator<TSource, TInner, TKey, TResult>\r\n        extends SourceResultIterator<TSource, TResult> {\r\n\r\n        private _keySelector: SelectorFunc<TSource, TKey>;\r\n        private _innerSequence: Iterable<TInner>;\r\n        private _innerKeySelector: SelectorFunc<TInner, TKey>;\r\n        private _resultSelector: ResultSelectorFunc<TSource, TInner, TResult>;\r\n        private _comparer: EqualityComparerFunc<TKey>;\r\n        private _groups: Map<TKey, TResult[]>;\r\n\r\n        constructor(\r\n            iterable: Iterable<TSource>,\r\n            innerSequence: Iterable<TInner>,\r\n            keySelector: SelectorFunc<TSource, TKey>,\r\n            innerKeySelector: SelectorFunc<TInner, TKey>,\r\n            resultSelector: ResultSelectorFunc<TSource, TInner, TResult>,\r\n            comparer?: EqualityComparerFunc<TKey>\r\n        ) {\r\n            super(iterable);\r\n            this._keySelector = keySelector;\r\n            this._innerSequence = innerSequence;\r\n            this._innerKeySelector = innerKeySelector;\r\n            this._resultSelector = resultSelector || ((key, inner) => <TResult><any>inner);\r\n            this._comparer = comparer;\r\n            this._groups = new Map<TKey, TResult[]>();\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<TResult> {\r\n            let lookup = Lookup.createForJoin<TKey, TInner>(this._innerSequence, this._innerKeySelector/*, this._comparer*/);\r\n            for (let item of this.iterable) {\r\n                let key = this._keySelector(item);\r\n                let grouping = lookup.item(key);\r\n                for(let groupItem of grouping) {\r\n                    yield this._resultSelector(item, groupItem);\r\n                }\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class OfTypeIterator<TSource, TResult> extends SourceResultIterator<TSource, TResult> {\r\n\r\n        private _type: new () => TResult;\r\n\r\n        constructor(iterable: Iterable<TSource>, type: new () => TResult) {\r\n            super(iterable);\r\n            this._type = type;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<TResult> {\r\n            for (let item of this.iterable) {\r\n                this._index++;\r\n                if (item && (<any>item).constructor && (<any>item).constructor === this._type) {\r\n                    let result = <TResult><any>item;\r\n                    this._current = result;\r\n                    yield result;\r\n                }\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class PrependIterator<T> extends BaseIterator<T> {\r\n\r\n        private _item: T;\r\n\r\n        constructor(iterable: Iterable<T>, item: T) {\r\n            super(iterable);\r\n            this._item = item;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            this._index++;\r\n            this._current = this._item;\r\n            yield this._item;\r\n            for (let element of this.iterable) {\r\n                this._index++;\r\n                this._current = element;\r\n                yield this.current;\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class ReverseIterator<T> extends BaseIterator<T> {\r\n\r\n        constructor(iterable: Iterable<T>) {\r\n            super(iterable);\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            // TODO implementare ciclo inverso\r\n            let reversedIterable = [...this.iterable].reverse();\r\n            for (let element of reversedIterable) {\r\n                this._index++;\r\n                this._current = element;\r\n                yield this.current;\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class SelectIterator<TSource, TResult> extends SourceResultIterator<TSource, TResult> {\r\n\r\n        private _selector: SelectorFunc<TSource, TResult>;\r\n\r\n        constructor(iterable: Iterable<TSource>, selector: SelectorFunc<TSource, TResult>) {\r\n            super(iterable);\r\n            this._selector = selector;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<TResult> {\r\n            for (let element of this.iterable) {\r\n                this._index++;\r\n                this._current = this._selector(element, this.index);\r\n                yield this.current;\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class SelectManyIterator<TSource, TResult> extends SourceResultIterator<TSource, TResult> {\r\n\r\n        private _selector: SelectorFunc<TSource, Iterable<TResult>>;\r\n\r\n        constructor(iterable: Iterable<TSource>, selector: SelectorFunc<TSource, Iterable<TResult>>) {\r\n            super(iterable);\r\n            this._selector = selector;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<TResult> {\r\n            for (let element of this.iterable) {\r\n                this._index++;\r\n                let subElements = this._selector(element, this.index);\r\n                for (let subElement of subElements) {\r\n                    yield subElement;\r\n                }\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class SkipIterator<T> extends BaseIterator<T> {\r\n\r\n        private _count: number;\r\n\r\n        constructor(iterable: Iterable<T>, count: number) {\r\n            super(iterable);\r\n            this._count = count;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            for (let element of this.iterable) {\r\n                this._index++;\r\n                if (this._index < this._count) {\r\n                    continue;\r\n                }\r\n                this._current = element;\r\n                yield element;\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class SkipLastIterator<T> extends BaseIterator<T> {\r\n\r\n        private _count: number;\r\n\r\n        constructor(iterable: Iterable<T>, count: number) {\r\n            super(iterable);\r\n            this._count = count;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n\r\n            let queue = new Array<T>();\r\n\r\n            let iterator = this.iterable[Symbol.iterator]();\r\n\r\n            let iteratorResult: IteratorResult<T>;\r\n            while (!(iteratorResult = iterator.next()).done) {\r\n                if (queue.length === this._count) {\r\n                    do {\r\n                        // Dequeue\r\n                        let current = queue.splice(0, 1)[0];\r\n                        yield current;\r\n                        // Enqueue\r\n                        queue.push(iteratorResult.value);\r\n                    }\r\n                    while (!(iteratorResult = iterator.next()).done);\r\n                    break;\r\n                }\r\n                else {\r\n                    // Enqueue\r\n                    queue.push(iteratorResult.value);\r\n                }\r\n            }\r\n\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class SkipWhileIterator<T> extends BaseIterator<T> {\r\n\r\n        private _predicate: PredicateFunc<T>;\r\n        private _skip = true;\r\n\r\n        constructor(iterable: Iterable<T>, predicate: PredicateFunc<T>) {\r\n            super(iterable);\r\n            this._predicate = predicate;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            for (let element of this.iterable) {\r\n                this._index++;\r\n                if (this._skip) {\r\n                    if (this._predicate(element, this._index)) {\r\n                        continue;\r\n                    }\r\n                    this._skip = false;\r\n                }\r\n                this._current = element;\r\n                yield element;\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class TakeIterator<T> extends BaseIterator<T> {\r\n\r\n        private _count: number;\r\n\r\n        constructor(iterable: Iterable<T>, count: number) {\r\n            super(iterable);\r\n            this._count = count;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            for (let element of this.iterable) {\r\n                this._index++;\r\n                if (this._index >= this._count) {\r\n                    break;\r\n                }\r\n                this._current = element;\r\n                yield element;\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class TakeLastIterator<T> extends BaseIterator<T> {\r\n\r\n        private _count: number;\r\n\r\n        constructor(iterable: Iterable<T>, count: number) {\r\n            super(iterable);\r\n            this._count = count;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n\r\n            let iterator = this.iterable[Symbol.iterator]();\r\n\r\n            let iteratorResult: IteratorResult<T>;\r\n\r\n            if ((iteratorResult = iterator.next()).done) {\r\n                this.reset();\r\n                return;\r\n            }\r\n\r\n            let queue = new Array<T>();\r\n\r\n            // Enqueue\r\n            queue.push(iteratorResult.value);\r\n\r\n            while (!(iteratorResult = iterator.next()).done) {\r\n                if (queue.length < this._count) {\r\n                    // Enqueue\r\n                    queue.push(iteratorResult.value);\r\n                }\r\n                else {\r\n                    do {\r\n                        // Dequeue\r\n                        queue.splice(0, 1);\r\n                        // Enqueue\r\n                        queue.push(iteratorResult.value);\r\n                    }\r\n                    while (!(iteratorResult = iterator.next()).done);\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (queue.length > this._count)\r\n                throw new Error();\r\n\r\n            do {\r\n                // Dequeue\r\n                let current = queue.splice(0, 1)[0];\r\n                yield current;\r\n            }\r\n            while (queue.length > 0);\r\n\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class TakeWhileIterator<T> extends BaseIterator<T> {\r\n\r\n        private _predicate: PredicateFunc<T>;\r\n\r\n        constructor(iterable: Iterable<T>, predicate: PredicateFunc<T>) {\r\n            super(iterable);\r\n            this._predicate = predicate;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            for (let element of this.iterable) {\r\n                this._index++;\r\n                if (!this._predicate(element, this.index)) {\r\n                    break;\r\n                }\r\n                this._current = element;\r\n                yield element;\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class UnionIterator<T> extends BaseIterator<T> {\r\n\r\n        private _other: Iterable<T>;\r\n        private _values: T[];\r\n\r\n        constructor(iterable: Iterable<T>, other: Iterable<T>) {\r\n            super(iterable);\r\n            this._other = other;\r\n            this._values = [];\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            for (let element of this.iterable) {\r\n                this._values.push(element);\r\n                this._index++;\r\n                this._current = element;\r\n                yield element;\r\n            }\r\n            for (let element of this._other) {\r\n                if (this._values.indexOf(element) < 0) {\r\n                    this._values.push(element);\r\n                    this._index++;\r\n                    this._current = element;\r\n                    yield element;\r\n                }\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class WhereIterator<T> extends BaseIterator<T> {\r\n\r\n        private _predicate: PredicateFunc<T>;\r\n\r\n        constructor(iterable: Iterable<T>, predicate: PredicateFunc<T>) {\r\n            super(iterable);\r\n            this._predicate = predicate;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<T> {\r\n            for (let element of this.iterable) {\r\n                this._index++;\r\n                let valid = this._predicate(element, this.index);\r\n                if (valid) {\r\n                    this._current = element;\r\n                    yield element;\r\n                }\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n    export class ZipIterator<TFirst, TSecond, TResult> extends SourceResultIterator<TFirst, TResult> {\r\n\r\n        private _resultSelector: ResultSelectorFunc<TFirst, TSecond, TResult>;\r\n        private _sequence: Iterable<TSecond>;\r\n\r\n        constructor(iterable: Iterable<TFirst>, sequence: Iterable<TSecond>, resultSelector: ResultSelectorFunc<TFirst, TSecond, TResult>) {\r\n            super(iterable);\r\n            this._resultSelector = resultSelector;\r\n            this._sequence = sequence;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<TResult> {\r\n            for (let otherElement of this._sequence) {\r\n                for (let element of this.iterable) {\r\n                    var resultElement = this._resultSelector(element, otherElement);\r\n                    yield resultElement;\r\n                }\r\n            }\r\n            this.reset();\r\n        }\r\n    }\r\n\r\n\r\n    export class XPathResultIterator implements SourceIterator<any> {\r\n\r\n        private _xpathResult: XPathResult;\r\n        private _index: number = -1;\r\n        private _current: any = null;\r\n        private _chachedNodeIteration: any[] | null = null;\r\n\r\n        constructor(xpathResult: XPathResult) {\r\n            this._xpathResult = xpathResult;\r\n        }\r\n\r\n        public get index(): number {\r\n            return this._index;\r\n        }\r\n\r\n        public get current(): any {\r\n            return this._current;\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<any> {\r\n\r\n            switch (this._xpathResult.resultType) {\r\n\r\n                case 1: // XPathResult.NUMBER_TYPE\r\n                    this._index = 0;\r\n                    yield this._xpathResult.numberValue;\r\n                    break;\r\n                case 2: // XPathResult.STRING_TYPE\r\n                    this._index = 0;\r\n                    yield this._xpathResult.stringValue;\r\n                    break;\r\n                case 3: // XPathResult.BOOLEAN_TYPE\r\n                    this._index = 0;\r\n                    yield this._xpathResult.booleanValue;\r\n                    break;\r\n\r\n                case 0: // XPathResult.ANY_TYPE\r\n                case 4: // XPathResult.UNORDERED_NODE_ITERATOR_TYPE:\r\n                case 5: // XPathResult.ORDERED_NODE_ITERATOR_TYPE:\r\n                    {\r\n                        this._index = -1;\r\n\r\n                        if (this._chachedNodeIteration) {\r\n                            for (let element of this._chachedNodeIteration) {\r\n                                this._index++;\r\n                                this._current = element;\r\n                                yield element;\r\n                            }\r\n                        }\r\n                        else {\r\n                            this._chachedNodeIteration = [];\r\n                            let result = this._xpathResult.iterateNext();\r\n                            while (result) {\r\n                                this._index++;\r\n                                this._chachedNodeIteration.push(result);\r\n                                this._current = result;\r\n                                yield result;\r\n                                result = this._xpathResult.iterateNext();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case 6: // XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE:\r\n                case 7: // XPathResult.ORDERED_NODE_SNAPSHOT_TYPE:\r\n                    {\r\n                        this._index = -1;\r\n\r\n                        for (var i = 0; i < this._xpathResult.snapshotLength; i++) {\r\n                            this._index = i;\r\n                            this._current = this._xpathResult.snapshotItem(i);\r\n                            yield this._current;\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n                case 8: // XPathResult.ANY_UNORDERED_NODE_TYPE:\r\n                case 9: // XPathResult.FIRST_ORDERED_NODE_TYPE:\r\n                    this._index = 0;\r\n                    yield this._xpathResult.singleNodeValue;\r\n                    break;\r\n            }\r\n\r\n            this._index = -1;\r\n            this._current = null;\r\n            this._chachedNodeIteration = null;\r\n        }\r\n    }\r\n\r\n\r\n\t\r\n\r\n\texport class OrderedIterator<TSource> \r\n\t\textends BaseIterator<TSource>\r\n\t\timplements OrderedIterable<TSource> {\r\n\r\n\t\tprotected static createComparer<TSource, TKey>(keySelector: SelectorFunc<TSource, TKey>, descending: boolean): ComparerFunc<TSource> {\r\n\t\t\treturn (a, b) => {\r\n\t\t\t\tconst aKey = keySelector(a);\r\n\t\t\t\tconst bKey = keySelector(b);\r\n\t\t\t\tif (aKey > bKey) return descending ? -1 : 1;\r\n\t\t\t\tif (aKey < bKey) return descending ? 1 : -1;\r\n\t\t\t\treturn 0;\r\n\t\t\t};\r\n\t\t} \r\n\r\n\t\tconstructor(iterable: Iterable<TSource>, comparer: ComparerFunc<TSource>) {\r\n\t\t\tsuper(iterable);\r\n\t\t\tthis.comparer = comparer;\r\n\t\t}\r\n\r\n\t\tpublic readonly comparer: ComparerFunc<TSource>;\r\n\r\n\t\tpublic *[Symbol.iterator](): Iterator<TSource> {\r\n\t\t\tconst orderedSource = [...this.iterable].sort(this.comparer);\r\n\t\t\tyield* orderedSource;\r\n\t\t}\r\n\t}\r\n\r\n\texport class OrderByIterator<TSource, TKey> extends OrderedIterator<TSource> {\r\n\r\n\t\tconstructor(iterable: Iterable<TSource>, keySelector: SelectorFunc<TSource, TKey>, descending = false) {\r\n            super(iterable, OrderedIterator.createComparer(keySelector, descending));\r\n        }\r\n\t}\r\n\r\n\texport class ThenByIterator<TSource, TKey> extends OrderedIterator<TSource> {\r\n\r\n\t\tconstructor(iterable: OrderedIterable<TSource>, keySelector: SelectorFunc<TSource, TKey>, descending = false) {\r\n            super(\r\n\t\t\t\titerable,\r\n\t\t\t\tcomposeComparers(\r\n\t\t\t\t\titerable.comparer,\r\n\t\t\t\t\tOrderedIterator.createComparer(keySelector, descending)\r\n\t\t\t\t)\r\n\t\t\t);\r\n        }\r\n\t}\r\n\r\n\t// export class OrderByIterator<TSource, TKey> extends BaseIterator<TSource> {\r\n\r\n\t// \tprotected _keySelector: SelectorFunc<TSource, TKey>;\r\n\t// \tprotected _descending: boolean;\r\n\t// \tprotected _comparer: ComparerFunc<TSource>;\r\n\r\n\t// \tconstructor(iterable: Iterable<TSource>, keySelector: SelectorFunc<TSource, TKey>, descending = false) {\r\n    //         super(iterable);\r\n    //         this._keySelector = keySelector;\r\n\t// \t\tthis._descending = descending;\r\n\r\n\t// \t\tthis._comparer = this.createComparer(this._keySelector, this._descending);\r\n    //     }\r\n\r\n\t// \tprotected createComparer(keySelector: SelectorFunc<TSource, TKey>, descending: boolean): ComparerFunc<TSource> {\r\n\t// \t\treturn (a, b) => {\r\n\t// \t\t\tconst aKey = keySelector(a);\r\n\t// \t\t\tconst bKey = keySelector(b);\r\n\t// \t\t\tif (aKey > bKey) return descending ? -1 : 1;\r\n\t// \t\t\tif (aKey < bKey) return descending ? 1 : -1;\r\n\t// \t\t\treturn 0;\r\n\t// \t\t};\r\n\t// \t}\r\n\r\n\t// \tpublic get keySelector() { return this._keySelector; }\r\n\r\n\t// \tpublic get descending() { return this._descending; }\r\n\r\n\t// \tpublic *[Symbol.iterator](): Iterator<TSource> {\r\n\t// \t\tconst orderedSource = [...this.iterable].sort(this._comparer);\r\n\t// \t\tyield* orderedSource;\r\n\t// \t}\r\n\t// }\r\n\r\n\t// export class ThenByIterator<TSource, TKey> extends OrderByIterator<TSource, TKey> {\r\n\r\n\t// \tprivate _currentKeySelector: SelectorFunc<TSource, TKey>;\r\n\t// \tprivate _currentComparer: ComparerFunc<TSource>;\r\n\r\n\t// \tconstructor(iterable: OrderByIterator<TSource, TKey>, keySelector: SelectorFunc<TSource, TKey>, descending = false) {\r\n    //         super(iterable, iterable.keySelector, descending);\r\n\t// \t\tthis._currentKeySelector = keySelector;\r\n\r\n\t// \t\tconst localComparer = this.createComparer(keySelector, descending);\r\n\t// \t\tthis._currentComparer = composeComparers(this._comparer, localComparer);\r\n    //     }\r\n\r\n\t// \tpublic *[Symbol.iterator](): Iterator<TSource> {\r\n\t// \t\tconst orderedSource = [...this.iterable].sort(this._currentComparer);\r\n\t// \t\tyield* orderedSource;\r\n\t// \t}\r\n\t// }\r\n}","/// <reference path=\"Functions.ts\" />\r\n/// <reference path=\"Generators.ts\" />\r\n/// <reference path=\"Iterators.ts\" />\r\n/// <reference path=\"Enumerable.ts\" />\r\n\r\nnamespace Linq {\r\n\r\n    export const Version = \"0.0.1\";\r\n}\r\n\r\nif(typeof module !== \"undefined\") {\r\n    module.exports = Linq;\r\n}\r\n\r\n//export as namespace;\r\n","\r\nnamespace Linq {\r\n\r\n    function assert(expression: () => boolean) : void {\r\n        if(!expression()) {\r\n            throw new Error(\"Assert fail: \" + expression.toString());\r\n        }\r\n    }\r\n    \r\n    export interface ILookup<TKey, TElement> {\r\n        readonly count: number;\r\n        item(key: TKey): Iterable<TElement>;\r\n        contains(key: TKey): boolean;\r\n\t}\r\n\r\n    export class Lookup<TKey, TElement, TResult = TElement> implements ILookup<TKey, TResult>, Iterable<IGrouping<TKey, TResult>> {\r\n\r\n        private static mapAsGroups<TKey, TSource, TElement = TSource>(\r\n            source: Iterable<TSource>,\r\n            keySelector: SelectorFunc<TSource, TKey>,\r\n            elementSelector?: SelectorFunc<TSource, TElement>\r\n        ): Map<TKey, TElement[]> {\r\n\r\n            var result = new Map<TKey, TElement[]>();\r\n            var keys = new Set<TKey>();\r\n            var hasElementSelector = typeof elementSelector === \"function\";\r\n\r\n            var index = 0;\r\n            for (let element of source) {\r\n\r\n                var key = keySelector(element, index);\r\n\r\n                var groupedElement: TSource | TElement = element;\r\n                if(hasElementSelector) {\r\n                    groupedElement = elementSelector(element, index);\r\n                }\r\n\r\n                if(result.has(key)) {\r\n                    result.get(key).push(groupedElement as TElement);\r\n                } else {\r\n                    result.set(key, [groupedElement as TElement]);\r\n                }\r\n\r\n                keys.add(key);\r\n                index++;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public static create<TSource, TKey, TElement>(\r\n            source: Iterable<TSource>, \r\n            keySelector: SelectorFunc<TSource, TKey>, \r\n            elementSelector: SelectorFunc<TSource, TElement>\r\n            ): Lookup<TKey, TElement> {\r\n\r\n            assert(() => source != null);\r\n            assert(() => keySelector != null);\r\n            assert(() => elementSelector != null);\r\n\r\n            let mappedGroups = Lookup.mapAsGroups(source, keySelector, elementSelector);\r\n            let lookup = new Lookup<TKey, TElement>(mappedGroups);\r\n\r\n            return lookup;\r\n        }\r\n\r\n        public static createForJoin<TKey, TElement>(\r\n            source: Iterable<TElement>, \r\n            keySelector: SelectorFunc<TElement, TKey>/*, \r\n            comparer?: EqualityComparerFunc<TKey>*/\r\n            ): Lookup<TKey, TElement> {\r\n\r\n\r\n            let mappedGroups = Lookup.mapAsGroups(source, keySelector);\r\n            let lookup = new Lookup<TKey, TElement>(mappedGroups);\r\n\r\n            return lookup;\r\n        }\r\n\r\n        private _mappedArrays: Map<TKey, TResult[]>;\r\n        private _map: Map<TKey, Grouping<TKey, TResult>>;\r\n        \r\n\r\n        constructor(map: Map<TKey, TResult[]>) {\r\n            this._mappedArrays = map;\r\n            this._map = new Map<TKey, Grouping<TKey, TResult>>();\r\n        }\r\n\r\n        public get count(): number {\r\n            return this._mappedArrays.size;\r\n        }\r\n\r\n        public item(key: TKey): IGrouping<TKey, TResult> {\r\n            if(this._map.has(key)) {\r\n                return this._map.get(key);\r\n            } else if(this._mappedArrays.has(key)) {\r\n                var grouping = new Grouping(key, this._mappedArrays.get(key));\r\n                this._map.set(key, grouping);\r\n                return grouping;\r\n            }\r\n        }\r\n\r\n        public contains(key: TKey): boolean {\r\n            return this._mappedArrays.has(key);\r\n        }\r\n\r\n        public *[Symbol.iterator](): Iterator<IGrouping<TKey, TResult>> {\r\n            let keys = this._mappedArrays.keys();\r\n            for(let k of keys) {\r\n                yield this.item(k);\r\n            }\r\n        }\r\n    }\r\n}"]}